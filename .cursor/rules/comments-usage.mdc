---
description: 
globs: 
alwaysApply: true
---
# Comments Usage Guidelines

## Core Principle
Only add comments when they provide genuine value. Unnecessary comments are lengthy to remove and clutter code.

## Summary

**Default to no comments** - let the code speak for itself through clear naming and structure. Add comments only when they provide genuine insight that cannot be expressed through code clarity alone.

## When to Add Comments

### ✅ Valuable Comments
- **Non-obvious algorithms**: Mathematical formulas, optimization techniques, or complex data transformations
- **TODO/FIXME**: Temporary workarounds with specific plans for resolution
- **API documentation**: JSDoc for public interfaces (only when explicitly requested)
- **Type suppressions**: Brief explanation for `// @ts-ignore` or `// eslint-disable`

```typescript
// ✅ Good - explains non-obvious constraint
// Batch size limited to 100 due to Pinecone API restrictions
const BATCH_SIZE = 100;

// ✅ Good - explains type suppression necessity
// @ts-ignore - mockUser.someProperty is test-specific and not in IUser interface
const result = mockUser.someProperty;
// ❌ Bad - you may think this is good, it's not because it's obvious or should be documented in the code itself if not.
// Using exponential backoff to prevent API rate limiting during bulk operations
const delay = Math.pow(2, retryCount) * 1000;

```

### ❌ Avoid These Comments
- **Obvious code explanations**: Don't describe what the code clearly shows
- **Redundant descriptions**: Comments that repeat the function/variable names
- **Test behavior explanations**: Tests should be self-explanatory through naming
- **Step-by-step narration**: Describing each line of straightforward code
- **Generic placeholders**: "TODO: implement this" without specifics

```typescript
// ❌ Bad - obvious
// Set the user ID to the provided user ID
user.id = userId;

// ❌ Bad - redundant
// Get user settings from database
const settings = await getUserSettings();

// ❌ Bad - explains obvious test behavior
// This test checks if the function returns the expected result
it("should return expected result", () => {
  expect(result).toBe(expected);
});

// ❌ Bad - step-by-step narration
// First, we check if user exists
if (user) {
  // Then we validate the user data
  if (isValid(user)) {
    // Finally, we save the user
    await saveUser(user);
  }
}
```

## JSDoc Guidelines

### Only When Requested
- Don't add JSDoc unless explicitly asked
- Focus on public APIs and complex interfaces when needed
- Keep JSDoc concise and focused on usage

```typescript
// ✅ Good JSDoc (when requested)
/**
 * Generates embeddings for content with automatic chunking
 * @param content - Text content to embed (max 50,000 chars)
 * @param namespace - Embedding namespace for organization
 * @returns Promise resolving to embedding IDs
 */
async function generateEmbeddings(content: string, namespace: string): Promise<string[]>

// ❌ Bad JSDoc (unnecessary)
/**
 * Sets the user name
 * @param name - The name to set
 */
function setName(name: string) {
  this.name = name;
}
```

## Code Self-Documentation

### Prefer Self-Explanatory Code
- Use descriptive variable and function names
- Break complex operations into named functions
- Use meaningful constants instead of magic numbers

```typescript
// ✅ Good - self-documenting
const MAX_RETRY_ATTEMPTS = 3;
const RATE_LIMIT_DELAY_MS = 1000;

async function retryWithExponentialBackoff<T>(
  operation: () => Promise<T>,
  maxAttempts: number = MAX_RETRY_ATTEMPTS
): Promise<T> {
  // Only comment here would be for non-obvious business logic
}

// ❌ Bad - requires comments to understand
async function retry<T>(op: () => Promise<T>, max: number = 3): Promise<T> {
  // Now we need comments to explain what's happening
}
```

## Testing Comments

### Minimal Test Comments
- Test names should be descriptive enough to eliminate most comments
- Only comment on complex test setup or non-obvious assertions
- Never comment on obvious test steps

```typescript
// ✅ Good - descriptive test name, no comment needed
it("should filter articles by user ID and parse JSON data correctly", async () => {
  mockDatabase.getAppData.mockResolvedValue([
    { user_id: "user-123", data: JSON.stringify({ title: "Article 1" }) },
    { user_id: "other-user", data: JSON.stringify({ title: "Article 2" }) }
  ]);

  const result = await listArticles({ userId: "user-123" });
  expect(result).toHaveLength(1);
});

// ❌ Bad - unnecessary comment
it("should return user articles", async () => {
  // Mock the database to return test data
  mockDatabase.getAppData.mockResolvedValue(testData);
  // Call the service function
  const result = await listArticles({ userId: "user-123" });
  // Check that we get the expected result
  expect(result).toHaveLength(1);
});
```

## Error Handling Comments

### Don't use it when it doesn't make sense
```typescript
// ❌ Bad - You should just throw a better error rather than adding a comment.
try {
  await processLargeFile(file);
} catch (error) {
  // Wrap in generic error to avoid exposing internal file system details
  throw new AssistantError("File processing failed");
}

// ❌ Bad - obvious error handling
try {
  await processFile(file);
} catch (error) {
  // Throw error if processing fails
  throw error;
}
```

## Comment Maintenance

### Keep Comments Current
- Remove comments when refactoring makes them obsolete
- Update comments when changing the logic they describe
- Delete TODO comments when tasks are completed
- Review comments during code reviews for continued relevance
