---
description: 
globs: 
alwaysApply: true
---
# Testing Patterns for App Services

## File Structure
- Place tests in `__test__` folders next to the actual service files
- Name test files to match the service: `service-name.test.ts` for `service-name.ts`
- Import and test the actual service functions, not mock implementations

## Vitest Mocking Patterns

### Module-Level Mocking
```typescript
// Mock external dependencies at the top level
const mockDatabase = {
  getUserSettings: vi.fn(),
  saveAppData: vi.fn(),
  getAppData: vi.fn(),
};

const mockAIProvider = {
  name: "test-provider",
  supportsStreaming: true,
  createRealtimeSession: vi.fn(),
  createChatCompletion: vi.fn(),
};

// Use vi.mock with factory functions
vi.mock("~/lib/database", () => ({
  DatabaseSingleton: {
    getInstance: () => mockDatabase,
  },
}));
```

### Singleton Pattern Mocking
For services using singleton patterns, mock the `getInstance()` method to return your mock object:
```typescript
vi.mock("~/lib/providers/factory", () => ({
  AIProviderFactory: {
    getInstance: () => mockAIProvider,
  },
}));
```

### Accessing Mocked Functions
```typescript
// Use vi.mocked() for better type safety
const mockedFunction = vi.mocked(mockDatabase.getUserSettings);

// Or use await import() for dynamic imports
const { functionName } = await import("../service-file");
```

## TypeScript in Tests

### Mock Object Completeness
- Use `as any` for complex mock objects to avoid excessive property requirements
- Add `// @ts-ignore` sparingly for test-specific property access
- Focus on properties actually used by the service under test

```typescript
const mockUser = {
  id: "user-123",
  email: "test@example.com",
  createdAt: new Date(),
} as any; // Avoid defining every IUser property
```

### Error Type Handling
```typescript
import { ErrorType } from "@/types/errors";

// Test error scenarios properly
expect(() => service.method()).toThrow();
// Or for async functions
await expect(() => service.method()).rejects.toThrow();
```

## Error Testing Patterns

### Service Error Wrapping
Many services wrap errors in try-catch blocks and re-throw generic messages:
```typescript
try {
  // operation
} catch (error) {
  throw new Error("Generic error message");
}
```

Test for the actual thrown message, not the original error:
```typescript
// ❌ Don't test for specific validation errors
expect(() => service()).toThrow("Missing required field");

// ✅ Test for the service's error message
expect(() => service()).toThrow("Error processing request");
```

## Common Patterns

### Parameter Validation Tests
Always test required parameter validation:
```typescript
it("should throw error for missing required parameters", async () => {
  await expect(() => service({})).rejects.toThrow();
});
```

### User Authorization Tests
Test user context and authorization:
```typescript
it("should respect user context", async () => {
  mockDatabase.getAppData.mockResolvedValue([
    { user_id: "user-123", data: "user-data" },
    { user_id: "other-user", data: "other-data" },
  ]);

  const result = await service({ userId: "user-123" });
  expect(result).toHaveLength(1);
  expect(result[0].data).toBe("user-data");
});
```

### JSON Data Parsing Tests
Test data parsing edge cases:
```typescript
it("should handle malformed JSON gracefully", async () => {
  mockDatabase.getAppData.mockResolvedValue([
    { data: "invalid-json" }
  ]);

  const result = await service();
  expect(result).toEqual([]);
});

it("should handle null data", async () => {
  mockDatabase.getAppData.mockResolvedValue([
    { data: null }
  ]);

  const result = await service();
  expect(result).toEqual([]);
});
```

### AI Integration Tests
Mock AI providers with realistic responses:
```typescript
mockAIProvider.createChatCompletion.mockResolvedValue({
  choices: [{
    message: { content: "AI response content" }
  }],
  usage: { total_tokens: 100 }
});
```

## Test Organization

### Describe Blocks
Group related tests logically:
```typescript
describe("Service Name", () => {
  describe("parameter validation", () => {
    // validation tests
  });

  describe("data processing", () => {
    // business logic tests
  });

  describe("error handling", () => {
    // error scenario tests
  });
});
```

### Setup and Teardown
```typescript
beforeEach(() => {
  vi.clearAllMocks();
});

afterEach(() => {
  vi.restoreAllMocks();
});
```

## Things to Avoid

- Don't add unnecessary comments explaining obvious test behavior
- Don't test mock implementations - test actual service functions
- Don't over-specify mock object properties unless the service uses them
- Don't assume specific error messages from wrapped try-catch blocks
- Don't create tests in `_test` folders - use `__test__` folders
- Don't forget to mock all external dependencies used by the service

## Complex Service Testing

For services with multiple steps (like drawing creation):
1. Mock each dependency separately
2. Test the full workflow end-to-end
3. Test failure at each step
4. Verify proper cleanup on errors
5. Test data transformation between steps

```typescript
it("should handle full workflow", async () => {
  // Setup all mocks for the complete flow
  mockStep1.mockResolvedValue(step1Result);
  mockStep2.mockResolvedValue(step2Result);
  mockStep3.mockResolvedValue(step3Result);

  const result = await complexService(params);
  
  expect(mockStep1).toHaveBeenCalledWith(expectedStep1Args);
  expect(mockStep2).toHaveBeenCalledWith(step1Result);
  expect(mockStep3).toHaveBeenCalledWith(step2Result);
  expect(result).toEqual(expectedFinalResult);
});
```
